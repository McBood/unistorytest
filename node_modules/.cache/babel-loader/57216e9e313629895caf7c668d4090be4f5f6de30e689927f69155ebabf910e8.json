{"ast":null,"code":"import { DEFAULT_SUPPORTED_CHAINS } from '../../../constants';\nimport { subscribeToProviderEvents } from '../../../helpers';\nimport { Event } from '../../../helpers/event';\nimport { getAddNetworkParams } from '../../../helpers/getAddNetworkParams';\nimport { validateArguments } from '../../../helpers/validateArgument';\nimport { DEFAULT_CONFIG } from '../../../model/config/default';\nimport { MetamaskConnector } from './implementations';\nexport class ConnectorController {\n  constructor(connector) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_CONFIG;\n    this.connector = connector;\n    this.updated = new Event();\n    this.newBlock = new Event();\n    this.active = false;\n    this.accounts = [];\n    this.errors = [];\n    this._config = Object.assign({}, config);\n    this._connectorUnsubscribe = connector.update.on(_ref => {\n      let {\n        chainId,\n        accounts\n      } = _ref;\n      this.chainId = chainId;\n      this.accounts = accounts;\n      this.emitUpdate();\n    });\n  }\n  emitUpdate() {\n    this.updated.emit({\n      active: this.active,\n      chainId: this.chainId,\n      accounts: this.accounts,\n      blockNumber: this.blockNumber,\n      errors: this.errors\n    });\n  }\n  updateConfig(config) {\n    this._config = Object.assign(Object.assign({}, this._config), config);\n  }\n  getProvider() {\n    return this.connector.provider;\n  }\n  async activate() {\n    let connectorActivator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : connector => connector.activate();\n    await connectorActivator(this.connector);\n    const provider = this.getProvider();\n    if (!provider) {\n      throw new Error('Failed to activate connector');\n    }\n    this.clearSubscriptions = subscribeToProviderEvents(this.connector, _ref2 => {\n      let {\n        chainId,\n        accounts\n      } = _ref2;\n      if (chainId !== undefined) {\n        this.chainId = chainId;\n      }\n      if (accounts !== undefined) {\n        this.accounts = accounts;\n      }\n      this.emitUpdate();\n    }, () => {\n      if (this.connector instanceof MetamaskConnector && this._config.noMetamaskDeactivate) {\n        return;\n      }\n      void this.deactivate();\n    });\n    this.blockNumber = await provider.getBlockNumber();\n    this.newBlock.emit(this.blockNumber);\n    this.removeBlockEffect = this.newBlock.addEffect(() => {\n      const listener = blockNumber => {\n        this.blockNumber = blockNumber;\n        this.newBlock.emit(blockNumber);\n        this.emitUpdate();\n      };\n      provider.on('block', listener);\n      return () => {\n        provider.off('block', listener);\n      };\n    });\n    this.active = true;\n    this.emitUpdate();\n  }\n  async deactivate() {\n    var _a, _b, _c;\n    this.active = false;\n    (_a = this.removeBlockEffect) === null || _a === void 0 ? void 0 : _a.call(this);\n    (_b = this.clearSubscriptions) === null || _b === void 0 ? void 0 : _b.call(this);\n    (_c = this._connectorUnsubscribe) === null || _c === void 0 ? void 0 : _c.call(this);\n    await this.connector.deactivate();\n    this.chainId = undefined;\n    this.accounts = [];\n    this.blockNumber = undefined;\n    this.errors = [];\n    this.emitUpdate();\n  }\n  async switchNetwork(chainId) {\n    var _a;\n    const provider = this.getProvider();\n    validateArguments({\n      chainId\n    }, {\n      chainId: 'number'\n    });\n    if (!provider) {\n      throw new Error('Connector not initialized');\n    }\n    try {\n      await provider.send('wallet_switchEthereumChain', [{\n        chainId: `0x${chainId.toString(16)}`\n      }]);\n    } catch (error) {\n      const errChainNotAddedYet = 4902; // Metamask error code\n      if (error.code === errChainNotAddedYet) {\n        const chain = ((_a = this._config.networks) !== null && _a !== void 0 ? _a : DEFAULT_SUPPORTED_CHAINS).find(chain => chain.chainId === chainId);\n        if (!chain) throw new Error(`ChainId \"${chainId}\" not found in config.networks. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`);\n        if (!chain.rpcUrl) throw new Error(`ChainId \"${chainId}\" does not have RPC url configured by default. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`);\n        await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n      } else {\n        throw error;\n      }\n    }\n  }\n  reportError(error) {\n    this.errors.push(error);\n    this.emitUpdate();\n  }\n}","map":{"version":3,"names":["DEFAULT_SUPPORTED_CHAINS","subscribeToProviderEvents","Event","getAddNetworkParams","validateArguments","DEFAULT_CONFIG","MetamaskConnector","ConnectorController","constructor","connector","config","arguments","length","undefined","updated","newBlock","active","accounts","errors","_config","Object","assign","_connectorUnsubscribe","update","on","_ref","chainId","emitUpdate","emit","blockNumber","updateConfig","getProvider","provider","activate","connectorActivator","Error","clearSubscriptions","_ref2","noMetamaskDeactivate","deactivate","getBlockNumber","removeBlockEffect","addEffect","listener","off","_a","call","_b","_c","switchNetwork","send","toString","error","errChainNotAddedYet","code","chain","networks","find","rpcUrl","reportError","push"],"sources":["/Users/mcbood/Desktop/unitestask/node_modules/@usedapp/core/src/providers/network/connectors/connectorController.ts"],"sourcesContent":["import { providers } from 'ethers'\nimport { DEFAULT_SUPPORTED_CHAINS, FullConfig } from '../../../constants'\nimport { subscribeToProviderEvents } from '../../../helpers'\nimport { Event } from '../../../helpers/event'\nimport { getAddNetworkParams } from '../../../helpers/getAddNetworkParams'\nimport { validateArguments } from '../../../helpers/validateArgument'\nimport { DEFAULT_CONFIG } from '../../../model/config/default'\nimport { Connector } from './connector'\nimport { MetamaskConnector } from './implementations'\n\nexport interface ControllerUpdateInfo {\n  active: ConnectorController['active']\n  accounts: ConnectorController['accounts']\n  chainId: ConnectorController['chainId']\n  blockNumber: ConnectorController['blockNumber']\n  errors: ConnectorController['errors']\n}\n\nexport class ConnectorController {\n  readonly updated = new Event<ControllerUpdateInfo>()\n  readonly newBlock = new Event<number>()\n\n  public active = false\n  public accounts: string[] = []\n  public chainId: number | undefined\n  public blockNumber: number | undefined\n  public errors: Error[] = []\n\n  private _config: FullConfig\n  private _connectorUnsubscribe: () => void | undefined\n\n  private emitUpdate() {\n    this.updated.emit({\n      active: this.active,\n      chainId: this.chainId,\n      accounts: this.accounts,\n      blockNumber: this.blockNumber,\n      errors: this.errors,\n    })\n  }\n\n  public updateConfig(config: Partial<FullConfig>) {\n    this._config = {\n      ...this._config,\n      ...config,\n    }\n  }\n\n  private removeBlockEffect?: () => void\n  private clearSubscriptions?: () => void\n\n  constructor(public readonly connector: Connector, config: FullConfig = DEFAULT_CONFIG) {\n    this._config = { ...config }\n    this._connectorUnsubscribe = connector.update.on(({ chainId, accounts }) => {\n      this.chainId = chainId\n      this.accounts = accounts\n      this.emitUpdate()\n    })\n  }\n\n  getProvider(): providers.Web3Provider | providers.JsonRpcProvider | undefined {\n    return this.connector.provider\n  }\n\n  async activate(connectorActivator = (connector: Connector) => connector.activate()) {\n    await connectorActivator(this.connector)\n    const provider = this.getProvider()\n    if (!provider) {\n      throw new Error('Failed to activate connector')\n    }\n\n    this.clearSubscriptions = subscribeToProviderEvents(\n      this.connector,\n      ({ chainId, accounts }) => {\n        if (chainId !== undefined) {\n          this.chainId = chainId\n        }\n        if (accounts !== undefined) {\n          this.accounts = accounts\n        }\n        this.emitUpdate()\n      },\n      () => {\n        if (this.connector instanceof MetamaskConnector && this._config.noMetamaskDeactivate) {\n          return\n        }\n        void this.deactivate()\n      }\n    )\n\n    this.blockNumber = await provider.getBlockNumber()\n    this.newBlock.emit(this.blockNumber)\n    this.removeBlockEffect = this.newBlock.addEffect(() => {\n      const listener = (blockNumber: number) => {\n        this.blockNumber = blockNumber\n        this.newBlock.emit(blockNumber)\n        this.emitUpdate()\n      }\n\n      provider.on('block', listener)\n\n      return () => {\n        provider.off('block', listener)\n      }\n    })\n\n    this.active = true\n    this.emitUpdate()\n  }\n\n  async deactivate() {\n    this.active = false\n    this.removeBlockEffect?.()\n    this.clearSubscriptions?.()\n    this._connectorUnsubscribe?.()\n    await this.connector.deactivate()\n    this.chainId = undefined\n    this.accounts = []\n    this.blockNumber = undefined\n    this.errors = []\n    this.emitUpdate()\n  }\n\n  async switchNetwork(chainId: number) {\n    const provider = this.getProvider()\n\n    validateArguments({ chainId }, { chainId: 'number' })\n\n    if (!provider) {\n      throw new Error('Connector not initialized')\n    }\n\n    try {\n      await provider.send('wallet_switchEthereumChain', [{ chainId: `0x${chainId.toString(16)}` }])\n    } catch (error: any) {\n      const errChainNotAddedYet = 4902 // Metamask error code\n      if (error.code === errChainNotAddedYet) {\n        const chain = (this._config.networks ?? DEFAULT_SUPPORTED_CHAINS).find((chain) => chain.chainId === chainId)\n        if (!chain)\n          throw new Error(\n            `ChainId \"${chainId}\" not found in config.networks. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`\n          )\n        if (!chain.rpcUrl)\n          throw new Error(\n            `ChainId \"${chainId}\" does not have RPC url configured by default. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`\n          )\n        await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)])\n      } else {\n        throw error\n      }\n    }\n  }\n\n  reportError(error: Error) {\n    this.errors.push(error)\n    this.emitUpdate()\n  }\n}\n"],"mappings":"AACA,SAASA,wBAAwB,QAAoB,oBAAoB;AACzE,SAASC,yBAAyB,QAAQ,kBAAkB;AAC5D,SAASC,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,mBAAmB,QAAQ,sCAAsC;AAC1E,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,SAASC,cAAc,QAAQ,+BAA+B;AAE9D,SAASC,iBAAiB,QAAQ,mBAAmB;AAUrD,OAAM,MAAOC,mBAAmB;EAiC9BC,YAA4BC,SAAoB,EAAqC;IAAA,IAAnCC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAqBN,cAAc;IAAzD,KAAAI,SAAS,GAATA,SAAS;IAhC5B,KAAAK,OAAO,GAAG,IAAIZ,KAAK,EAAwB;IAC3C,KAAAa,QAAQ,GAAG,IAAIb,KAAK,EAAU;IAEhC,KAAAc,MAAM,GAAG,KAAK;IACd,KAAAC,QAAQ,GAAa,EAAE;IAGvB,KAAAC,MAAM,GAAY,EAAE;IA0BzB,IAAI,CAACC,OAAO,GAAAC,MAAA,CAAAC,MAAA,KAAQX,MAAM,CAAE;IAC5B,IAAI,CAACY,qBAAqB,GAAGb,SAAS,CAACc,MAAM,CAACC,EAAE,CAACC,IAAA,IAA0B;MAAA,IAAzB;QAAEC,OAAO;QAAET;MAAQ,CAAE,GAAAQ,IAAA;MACrE,IAAI,CAACC,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACT,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACU,UAAU,EAAE;IACnB,CAAC,CAAC;EACJ;EA3BQA,UAAUA,CAAA;IAChB,IAAI,CAACb,OAAO,CAACc,IAAI,CAAC;MAChBZ,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBU,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBT,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBY,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BX,MAAM,EAAE,IAAI,CAACA;KACd,CAAC;EACJ;EAEOY,YAAYA,CAACpB,MAA2B;IAC7C,IAAI,CAACS,OAAO,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACP,IAAI,CAACF,OAAO,GACZT,MAAM,CACV;EACH;EAcAqB,WAAWA,CAAA;IACT,OAAO,IAAI,CAACtB,SAAS,CAACuB,QAAQ;EAChC;EAEA,MAAMC,QAAQA,CAAA,EAAoE;IAAA,IAAnEC,kBAAA,GAAAvB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAsBF,SAAoB,IAAKA,SAAS,CAACwB,QAAQ,EAAE;IAChF,MAAMC,kBAAkB,CAAC,IAAI,CAACzB,SAAS,CAAC;IACxC,MAAMuB,QAAQ,GAAG,IAAI,CAACD,WAAW,EAAE;IACnC,IAAI,CAACC,QAAQ,EAAE;MACb,MAAM,IAAIG,KAAK,CAAC,8BAA8B,CAAC;;IAGjD,IAAI,CAACC,kBAAkB,GAAGnC,yBAAyB,CACjD,IAAI,CAACQ,SAAS,EACd4B,KAAA,IAA0B;MAAA,IAAzB;QAAEX,OAAO;QAAET;MAAQ,CAAE,GAAAoB,KAAA;MACpB,IAAIX,OAAO,KAAKb,SAAS,EAAE;QACzB,IAAI,CAACa,OAAO,GAAGA,OAAO;;MAExB,IAAIT,QAAQ,KAAKJ,SAAS,EAAE;QAC1B,IAAI,CAACI,QAAQ,GAAGA,QAAQ;;MAE1B,IAAI,CAACU,UAAU,EAAE;IACnB,CAAC,EACD,MAAK;MACH,IAAI,IAAI,CAAClB,SAAS,YAAYH,iBAAiB,IAAI,IAAI,CAACa,OAAO,CAACmB,oBAAoB,EAAE;QACpF;;MAEF,KAAK,IAAI,CAACC,UAAU,EAAE;IACxB,CAAC,CACF;IAED,IAAI,CAACV,WAAW,GAAG,MAAMG,QAAQ,CAACQ,cAAc,EAAE;IAClD,IAAI,CAACzB,QAAQ,CAACa,IAAI,CAAC,IAAI,CAACC,WAAW,CAAC;IACpC,IAAI,CAACY,iBAAiB,GAAG,IAAI,CAAC1B,QAAQ,CAAC2B,SAAS,CAAC,MAAK;MACpD,MAAMC,QAAQ,GAAId,WAAmB,IAAI;QACvC,IAAI,CAACA,WAAW,GAAGA,WAAW;QAC9B,IAAI,CAACd,QAAQ,CAACa,IAAI,CAACC,WAAW,CAAC;QAC/B,IAAI,CAACF,UAAU,EAAE;MACnB,CAAC;MAEDK,QAAQ,CAACR,EAAE,CAAC,OAAO,EAAEmB,QAAQ,CAAC;MAE9B,OAAO,MAAK;QACVX,QAAQ,CAACY,GAAG,CAAC,OAAO,EAAED,QAAQ,CAAC;MACjC,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAAC3B,MAAM,GAAG,IAAI;IAClB,IAAI,CAACW,UAAU,EAAE;EACnB;EAEA,MAAMY,UAAUA,CAAA;;IACd,IAAI,CAACvB,MAAM,GAAG,KAAK;IACnB,CAAA6B,EAAA,OAAI,CAACJ,iBAAiB,cAAAI,EAAA,uBAAAA,EAAA,CAAAC,IAAA,MAAI;IAC1B,CAAAC,EAAA,OAAI,CAACX,kBAAkB,cAAAW,EAAA,uBAAAA,EAAA,CAAAD,IAAA,MAAI;IAC3B,CAAAE,EAAA,OAAI,CAAC1B,qBAAqB,cAAA0B,EAAA,uBAAAA,EAAA,CAAAF,IAAA,MAAI;IAC9B,MAAM,IAAI,CAACrC,SAAS,CAAC8B,UAAU,EAAE;IACjC,IAAI,CAACb,OAAO,GAAGb,SAAS;IACxB,IAAI,CAACI,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACY,WAAW,GAAGhB,SAAS;IAC5B,IAAI,CAACK,MAAM,GAAG,EAAE;IAChB,IAAI,CAACS,UAAU,EAAE;EACnB;EAEA,MAAMsB,aAAaA,CAACvB,OAAe;;IACjC,MAAMM,QAAQ,GAAG,IAAI,CAACD,WAAW,EAAE;IAEnC3B,iBAAiB,CAAC;MAAEsB;IAAO,CAAE,EAAE;MAAEA,OAAO,EAAE;IAAQ,CAAE,CAAC;IAErD,IAAI,CAACM,QAAQ,EAAE;MACb,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;;IAG9C,IAAI;MACF,MAAMH,QAAQ,CAACkB,IAAI,CAAC,4BAA4B,EAAE,CAAC;QAAExB,OAAO,EAAE,KAAKA,OAAO,CAACyB,QAAQ,CAAC,EAAE,CAAC;MAAE,CAAE,CAAC,CAAC;KAC9F,CAAC,OAAOC,KAAU,EAAE;MACnB,MAAMC,mBAAmB,GAAG,IAAI,EAAC;MACjC,IAAID,KAAK,CAACE,IAAI,KAAKD,mBAAmB,EAAE;QACtC,MAAME,KAAK,GAAG,CAAC,CAAAV,EAAA,OAAI,CAAC1B,OAAO,CAACqC,QAAQ,cAAAX,EAAA,cAAAA,EAAA,GAAI7C,wBAAwB,EAAEyD,IAAI,CAAEF,KAAK,IAAKA,KAAK,CAAC7B,OAAO,KAAKA,OAAO,CAAC;QAC5G,IAAI,CAAC6B,KAAK,EACR,MAAM,IAAIpB,KAAK,CACb,YAAYT,OAAO,oHAAoH,CACxI;QACH,IAAI,CAAC6B,KAAK,CAACG,MAAM,EACf,MAAM,IAAIvB,KAAK,CACb,YAAYT,OAAO,mIAAmI,CACvJ;QACH,MAAMM,QAAQ,CAACkB,IAAI,CAAC,yBAAyB,EAAE,CAAC/C,mBAAmB,CAACoD,KAAK,CAAC,CAAC,CAAC;OAC7E,MAAM;QACL,MAAMH,KAAK;;;EAGjB;EAEAO,WAAWA,CAACP,KAAY;IACtB,IAAI,CAAClC,MAAM,CAAC0C,IAAI,CAACR,KAAK,CAAC;IACvB,IAAI,CAACzB,UAAU,EAAE;EACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}