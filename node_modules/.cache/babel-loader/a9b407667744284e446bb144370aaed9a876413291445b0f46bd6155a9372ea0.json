{"ast":null,"code":"import { useMemo } from 'react';\nimport { useRawCalls } from './useRawCalls';\nimport { decodeCallResult, encodeCallData } from '../helpers';\nimport { useChainId } from './useChainId';\nimport { useConfig } from './useConfig';\n/**\n * Makes a call to a specific method of a specific contract and returns the value or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the return value changes.\n * A syntax sugar for {@link useRawCall} that uses ABI, function name, and arguments instead of raw data.\n * If typechain contract is used in `call` parameter then method name and arguments will be type checked.\n * Result will be typed as well.\n *\n * More on type checking [here](https://usedapp-docs.netlify.app/docs/Guides/Reading/Typechain).\n *\n * @public\n * @param call a single call to a contract, also see {@link Call}\n * @returns The hook returns {@link CallResult} type.\n *\n * @example\n * function useTotalSupply(tokenAddress: string | undefined): BigNumber | undefined {\n *    const { value, error } = useCall(tokenAddress && {\n *      contract: new Contract(tokenAddress, ERC20Interface),\n *      method: 'totalSupply',\n *      args: []\n *    }) ?? {}\n *    if(error) {\n *      console.error(error.message)\n *      return undefined\n *    }\n *    return value?.[0]\n * }\n */\nexport function useCall(call) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useCalls([call], queryParams)[0];\n}\n/**\n * Makes calls to specific methods of specific contracts and returns values or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the return values change.\n * A syntax sugar for {@link useRawCalls} that uses ABI, function name, and arguments instead of raw data.\n * @public\n * @param calls a list of contract calls, also see {@link Call}.\n * @param queryParams see {@link QueryParams}.\n * @returns a list of results (see {@link CallResult}).\n *\n * @example\n * function useTotalSupplies(tokenAddresses: string[] | undefined): (BigNumber | undefined)[] {\n *   const calls = tokenAddresses?.map(address => ({\n *     contract: new Contract(address, ERC20Interface),\n *     method: 'totalSupply',\n *     args: []\n *   })) ?? []\n *   const results = useCalls(calls) ?? []\n *   results.forEach((result, idx) => {\n *     if(result && result.error) {\n *       console.error(`Error encountered calling 'totalSupply' on ${calls[idx]?.contract.address}: ${result.error.message}`)\n *     }\n *   })\n *   return results.map(result => result?.value?.[0])\n * }\n */\nexport function useCalls(calls) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const chainId = useChainId({\n    queryParams\n  });\n  const {\n    refresh\n  } = useConfig();\n  const potentialRawCalls = useMemo(() => calls.map(call => {\n    var _a;\n    return chainId !== undefined ? encodeCallData(call, chainId, Object.assign(Object.assign({}, queryParams), {\n      refresh: (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : refresh\n    })) : undefined;\n  }), [JSON.stringify(calls.map(call => call && {\n    address: call.contract.address.toLowerCase(),\n    method: call.method,\n    args: call.args\n  })), chainId]);\n  const rawCalls = useMemo(() => potentialRawCalls.map(potentialCall => potentialCall instanceof Error ? undefined : potentialCall), [potentialRawCalls]);\n  const results = useRawCalls(rawCalls);\n  return useMemo(() => results.map((result, idx) => {\n    if (potentialRawCalls[idx] instanceof Error) {\n      return {\n        value: undefined,\n        error: potentialRawCalls[idx]\n      };\n    }\n    return decodeCallResult(calls[idx], result);\n  }), [results]);\n}","map":{"version":3,"names":["useMemo","useRawCalls","decodeCallResult","encodeCallData","useChainId","useConfig","useCall","call","queryParams","arguments","length","undefined","useCalls","calls","chainId","refresh","potentialRawCalls","map","Object","assign","_a","JSON","stringify","address","contract","toLowerCase","method","args","rawCalls","potentialCall","Error","results","result","idx","value","error"],"sources":["/Users/mcbood/Desktop/unitest/node_modules/@usedapp/core/src/hooks/useCall.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { Contract } from 'ethers'\nimport { ContractMethodNames, Falsy, Params, TypedContract } from '../model/types'\nimport { useRawCalls } from './useRawCalls'\nimport { CallResult, decodeCallResult, encodeCallData } from '../helpers'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { useChainId } from './useChainId'\nimport { useConfig } from './useConfig'\n\n/**\n * Represents a single call to a contract that can be included in multicall.\n *\n * Typechecking:\n *\n * If you want a variable of type Call to be type checked you need to pass a typechain contract type as in below example\n *\n * ```tsx\n * const typedCall: Call<ERC20> = { contract: ERC20Contract, method: 'name', args: [] }\n * ```\n *\n * If you also supply a method name in type arguments will also be type checked\n *\n * ```tsx\n * const typedCall: Call<ERC20, 'name'> = { contract: ERC20Contract, method: 'name', args: [] }\n * ```\n *\n * @public\n */\nexport interface Call<T extends TypedContract = Contract, MN extends ContractMethodNames<T> = ContractMethodNames<T>> {\n  /**\n   * contract instance, see [Contract](https://docs.ethers.io/v5/api/contract/contract/)\n   */\n  contract: T\n  /**\n   * function name\n   */\n  method: MN\n  /**\n   * arguments for the function\n   */\n  args: Params<T, MN>\n}\n\n/**\n * Makes a call to a specific method of a specific contract and returns the value or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the return value changes.\n * A syntax sugar for {@link useRawCall} that uses ABI, function name, and arguments instead of raw data.\n * If typechain contract is used in `call` parameter then method name and arguments will be type checked.\n * Result will be typed as well.\n *\n * More on type checking [here](https://usedapp-docs.netlify.app/docs/Guides/Reading/Typechain).\n *\n * @public\n * @param call a single call to a contract, also see {@link Call}\n * @returns The hook returns {@link CallResult} type.\n *\n * @example\n * function useTotalSupply(tokenAddress: string | undefined): BigNumber | undefined {\n *    const { value, error } = useCall(tokenAddress && {\n *      contract: new Contract(tokenAddress, ERC20Interface),\n *      method: 'totalSupply',\n *      args: []\n *    }) ?? {}\n *    if(error) {\n *      console.error(error.message)\n *      return undefined\n *    }\n *    return value?.[0]\n * }\n */\nexport function useCall<T extends TypedContract, MN extends ContractMethodNames<T>>(\n  call: Call<T, MN> | Falsy,\n  queryParams: QueryParams = {}\n): CallResult<T, MN> {\n  return useCalls([call], queryParams)[0]\n}\n\n/**\n * Makes calls to specific methods of specific contracts and returns values or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the return values change.\n * A syntax sugar for {@link useRawCalls} that uses ABI, function name, and arguments instead of raw data.\n * @public\n * @param calls a list of contract calls, also see {@link Call}.\n * @param queryParams see {@link QueryParams}.\n * @returns a list of results (see {@link CallResult}).\n *\n * @example\n * function useTotalSupplies(tokenAddresses: string[] | undefined): (BigNumber | undefined)[] {\n *   const calls = tokenAddresses?.map(address => ({\n *     contract: new Contract(address, ERC20Interface),\n *     method: 'totalSupply',\n *     args: []\n *   })) ?? []\n *   const results = useCalls(calls) ?? []\n *   results.forEach((result, idx) => {\n *     if(result && result.error) {\n *       console.error(`Error encountered calling 'totalSupply' on ${calls[idx]?.contract.address}: ${result.error.message}`)\n *     }\n *   })\n *   return results.map(result => result?.value?.[0])\n * }\n */\nexport function useCalls(calls: (Call | Falsy)[], queryParams: QueryParams = {}): CallResult<Contract, string>[] {\n  const chainId = useChainId({ queryParams })\n  const { refresh } = useConfig()\n\n  const potentialRawCalls = useMemo(\n    () =>\n      calls.map((call) =>\n        chainId !== undefined\n          ? encodeCallData(call, chainId, { ...queryParams, refresh: queryParams.refresh ?? refresh })\n          : undefined\n      ),\n    [\n      JSON.stringify(\n        calls.map(\n          (call) => call && { address: call.contract.address.toLowerCase(), method: call.method, args: call.args }\n        )\n      ),\n      chainId,\n    ]\n  )\n\n  const rawCalls = useMemo(\n    () => potentialRawCalls.map((potentialCall) => (potentialCall instanceof Error ? undefined : potentialCall)),\n    [potentialRawCalls]\n  )\n\n  const results = useRawCalls(rawCalls)\n  return useMemo(\n    () =>\n      results.map((result, idx) => {\n        if (potentialRawCalls[idx] instanceof Error) {\n          return { value: undefined, error: potentialRawCalls[idx] as Error }\n        }\n        return decodeCallResult(calls[idx], result)\n      }),\n    [results]\n  )\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAG/B,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAAqBC,gBAAgB,EAAEC,cAAc,QAAQ,YAAY;AAEzE,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,SAAS,QAAQ,aAAa;AAoCvC;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAM,SAAUC,OAAOA,CACrBC,IAAyB,EACI;EAAA,IAA7BC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;EAE7B,OAAOG,QAAQ,CAAC,CAACL,IAAI,CAAC,EAAEC,WAAW,CAAC,CAAC,CAAC,CAAC;AACzC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAM,SAAUI,QAAQA,CAACC,KAAuB,EAA+B;EAAA,IAA7BL,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;EAC7E,MAAMK,OAAO,GAAGV,UAAU,CAAC;IAAEI;EAAW,CAAE,CAAC;EAC3C,MAAM;IAAEO;EAAO,CAAE,GAAGV,SAAS,EAAE;EAE/B,MAAMW,iBAAiB,GAAGhB,OAAO,CAC/B,MACEa,KAAK,CAACI,GAAG,CAAEV,IAAI,IAAI;;IACjB,OAAAO,OAAO,KAAKH,SAAS,GACjBR,cAAc,CAACI,IAAI,EAAEO,OAAO,EAAAI,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAOX,WAAW;MAAEO,OAAO,EAAE,CAAAK,EAAA,GAAAZ,WAAW,CAACO,OAAO,cAAAK,EAAA,cAAAA,EAAA,GAAIL;IAAO,GAAG,GAC1FJ,SAAS;GAAA,CACd,EACH,CACEU,IAAI,CAACC,SAAS,CACZT,KAAK,CAACI,GAAG,CACNV,IAAI,IAAKA,IAAI,IAAI;IAAEgB,OAAO,EAAEhB,IAAI,CAACiB,QAAQ,CAACD,OAAO,CAACE,WAAW,EAAE;IAAEC,MAAM,EAAEnB,IAAI,CAACmB,MAAM;IAAEC,IAAI,EAAEpB,IAAI,CAACoB;EAAI,CAAE,CACzG,CACF,EACDb,OAAO,CACR,CACF;EAED,MAAMc,QAAQ,GAAG5B,OAAO,CACtB,MAAMgB,iBAAiB,CAACC,GAAG,CAAEY,aAAa,IAAMA,aAAa,YAAYC,KAAK,GAAGnB,SAAS,GAAGkB,aAAc,CAAC,EAC5G,CAACb,iBAAiB,CAAC,CACpB;EAED,MAAMe,OAAO,GAAG9B,WAAW,CAAC2B,QAAQ,CAAC;EACrC,OAAO5B,OAAO,CACZ,MACE+B,OAAO,CAACd,GAAG,CAAC,CAACe,MAAM,EAAEC,GAAG,KAAI;IAC1B,IAAIjB,iBAAiB,CAACiB,GAAG,CAAC,YAAYH,KAAK,EAAE;MAC3C,OAAO;QAAEI,KAAK,EAAEvB,SAAS;QAAEwB,KAAK,EAAEnB,iBAAiB,CAACiB,GAAG;MAAU,CAAE;;IAErE,OAAO/B,gBAAgB,CAACW,KAAK,CAACoB,GAAG,CAAC,EAAED,MAAM,CAAC;EAC7C,CAAC,CAAC,EACJ,CAACD,OAAO,CAAC,CACV;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}