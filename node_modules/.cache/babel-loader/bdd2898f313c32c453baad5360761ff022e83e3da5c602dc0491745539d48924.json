{"ast":null,"code":"import { MultiCallABI } from '../constants';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useCall } from './useCall';\nimport { Contract } from 'ethers';\n/**\n * Returns ether balance of a given account.\n * @param address address of an account\n * @returns a balance of the account which is BigNumber or `undefined` if not connected to network or address is a falsy value\n * @public\n *\n * @example\n * const { account } = useEthers()\n * const etherBalance = useEtherBalance(account)\n *\n * return (\n *   {etherBalance && <p>Ether balance: {formatEther(etherBalance)} ETH </p>}\n * )\n */\nexport function useEtherBalance(address) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a;\n  const multicallAddress = useMulticallAddress(queryParams);\n  const {\n    value: value\n  } = (_a = useCall(multicallAddress && address && {\n    contract: new Contract(multicallAddress, MultiCallABI),\n    method: 'getEthBalance',\n    args: [address]\n  }, queryParams)) !== null && _a !== void 0 ? _a : {};\n  return value === null || value === void 0 ? void 0 : value[0];\n}","map":{"version":3,"names":["MultiCallABI","useMulticallAddress","useCall","Contract","useEtherBalance","address","queryParams","arguments","length","undefined","multicallAddress","value","_a","contract","method","args"],"sources":["/Users/mcbood/Desktop/unitest/node_modules/@usedapp/core/src/hooks/useEtherBalance.ts"],"sourcesContent":["import { MultiCallABI } from '../constants'\nimport { useMulticallAddress } from './useMulticallAddress'\nimport { Falsy } from '../model/types'\nimport { BigNumber } from 'ethers'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { useCall } from './useCall'\nimport { Contract } from 'ethers'\n\n/**\n * Returns ether balance of a given account.\n * @param address address of an account\n * @returns a balance of the account which is BigNumber or `undefined` if not connected to network or address is a falsy value\n * @public\n *\n * @example\n * const { account } = useEthers()\n * const etherBalance = useEtherBalance(account)\n *\n * return (\n *   {etherBalance && <p>Ether balance: {formatEther(etherBalance)} ETH </p>}\n * )\n */\nexport function useEtherBalance(address: string | Falsy, queryParams: QueryParams = {}): BigNumber | undefined {\n  const multicallAddress = useMulticallAddress(queryParams)\n  const { value: value } =\n    useCall(\n      multicallAddress &&\n        address && {\n          contract: new Contract(multicallAddress, MultiCallABI),\n          method: 'getEthBalance',\n          args: [address],\n        },\n      queryParams\n    ) ?? {}\n  return value?.[0]\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,cAAc;AAC3C,SAASC,mBAAmB,QAAQ,uBAAuB;AAI3D,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,QAAQ,QAAQ,QAAQ;AAEjC;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,eAAeA,CAACC,OAAuB,EAA+B;EAAA,IAA7BC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;;EACpF,MAAMG,gBAAgB,GAAGT,mBAAmB,CAACK,WAAW,CAAC;EACzD,MAAM;IAAEK,KAAK,EAAEA;EAAK,CAAE,GACpB,CAAAC,EAAA,GAAAV,OAAO,CACLQ,gBAAgB,IACdL,OAAO,IAAI;IACTQ,QAAQ,EAAE,IAAIV,QAAQ,CAACO,gBAAgB,EAAEV,YAAY,CAAC;IACtDc,MAAM,EAAE,eAAe;IACvBC,IAAI,EAAE,CAACV,OAAO;GACf,EACHC,WAAW,CACZ,cAAAM,EAAA,cAAAA,EAAA,GAAI,EAAE;EACT,OAAOD,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAG,CAAC,CAAC;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}