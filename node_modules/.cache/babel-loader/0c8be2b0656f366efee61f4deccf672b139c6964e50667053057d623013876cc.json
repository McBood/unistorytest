{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/mcbood/Desktop/unitest/node_modules/@usedapp/core/src/constants/type/Config.ts"],"sourcesContent":["import { Chain } from '../../constants'\nimport { Connector } from '../../providers/network/connectors/connector'\nimport { providers } from 'ethers'\n\nexport type BaseProviderFactory = () => providers.BaseProvider\n\nexport type NodeUrls = {\n  [chainId: number]: string | providers.BaseProvider | BaseProviderFactory\n}\n\nexport type MulticallAddresses = {\n  [chainId: number]: string\n}\n\nexport type PollingIntervals = {\n  [chaindId: number]: number\n}\n\n/**\n * useDApp configuration.\n * @public\n */\nexport interface FullConfig {\n  /**\n   * ChainId of a chain you want to connect to by default in a read-only mode\n   */\n  readOnlyChainId?: number\n  /**\n   * Mapping of ChainId's to node URLs to use in read-only mode.\n   * @Example\n   * {\n   *   ...\n   *   readOnlyUrls: {\n   *     [Mainnet.chainId]: 'https://mainnet.infura.io/v3/xxx',\n   *     [Goerli.chainId]: getDefaultProvider('goerli')\n   *   }\n   * }\n   */\n  readOnlyUrls?: NodeUrls\n  /**\n   * Mapping of ChainId's to multicall contract addresses on the chain.\n   */\n  multicallAddresses?: MulticallAddresses\n  /**\n   * Version of multicall contract on the chain.\n   */\n  multicallVersion: 1 | 2\n  /**\n   * When set to `true`, improves performance by using optimized encoders and decoders for multicall data.\n   * @experimental\n   * @defaultValue false\n   */\n  fastMulticallEncoding?: boolean\n  /**\n   * Don't listen on `disconnect` event from Metamask. Might be useful in dealing with [this Metamask bug](https://github.com/MetaMask/metamask-extension/issues/13375).\n   * @experimental\n   * @defaultValue false\n   */\n  noMetamaskDeactivate?: boolean\n  /**\n   * List of intended supported chains. If a user tries to connect to an unsupported chain an error value will be returned by useEthers.\n   * @deprecated\n   * @defaultValue [ChainId.Mainnet, ChainId.Goerli, ChainId.Kovan, ChainId.Rinkeby, ChainId.Ropsten, ChainId.xDai]\n   */\n  supportedChains?: number[]\n  /**\n   * List of intended supported chain configs.\n   * If a user tries to connect to an unsupported chain an error value will be returned by `useEthers`.\n   * Check the full list in {@link https://github.com/TrueFiEng/useDApp/tree/master/packages/core/src/model/chain}\n   * @defaultValue DEFAULT_SUPPORTED_CHAINS // [Localhost, Hardhat, Mainnet, Ropsten, Rinkeby, Goerli, Kovan, ...]\n   */\n  networks?: Chain[]\n  /**\n   * Default polling interval [ms] for a new block.\n   * @defaultValue 15000\n   */\n  pollingInterval: number\n\n  /**\n   * Polling intervals for new blocks on specific chains.\n   */\n  pollingIntervals?: PollingIntervals\n\n  /**\n   * Notifications options.\n   * @defaultValue\n   * {\n   *   checkInterval: 500,\n   *   expirationPeriod: 5000,\n   * }\n   */\n  notifications: {\n    checkInterval: number\n    expirationPeriod: number\n  }\n  /**\n   * Paths to locations in local storage.\n   * @defaultValue\n   * {\n   *   transactionPath: 'transactions'\n   * }\n   */\n  localStorage: {\n    transactionPath: string\n  }\n  /**\n   * If set, adds an additional buffer to estimated gas limit before sending a transaction.\n   * Useful if a gas limit of a transaction can be different depending on the state of the blockchain.\n   * Gas estimation can be not accurate because the state of the blockchain can change between the time of estimation and the time of transaction mining.\n   */\n  gasLimitBufferPercentage?: number\n  /**\n   * @deprecated\n   * Alias for gasLimitBufferPercentage.\n   */\n  bufferGasLimitPercentage?: number\n  /**\n   * Enables reconnecting to last used provider when user revisits the page.\n   * @defaultValue true\n   */\n  autoConnect: boolean\n  /**\n   * Refresh standard calls each time the n-th block is mined.\n   */\n  refresh?: number | 'never' | 'everyBlock'\n  /**\n   * Optional Local storage override for use in environments like React Native\n   */\n  localStorageOverride?: WindowLocalStorage['localStorage']\n  /**\n   * Specify configuration of the wallets that can be used in the app\n   * @defaultValue\n   * {\n   *  metamask: new MetamaskConnector(),\n   * }\n   */\n  connectors: {\n    [key: string]: Connector\n  }\n}\n\n/* eslint-disable @typescript-eslint/ban-types  */\ntype RecursivePartial<Object, Keys extends {}> = {\n  [P in keyof Object]?: P extends keyof Keys ? RecursivePartial<Object[P], Keys[P]> : Object[P]\n}\n\n/**\n * useDapp configuration.\n */\nexport type Config = RecursivePartial<\n  FullConfig,\n  {\n    notifications: {}\n  }\n>\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}