{"ast":null,"code":"import { useConfig } from './useConfig';\nimport { useEthers } from './useEthers';\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context';\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions';\nimport { sanitizeTransactionRequest } from '../helpers/gnosisSafeUtils';\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options) {\n  var _a, _b, _c;\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const transactionChainId = options && 'chainId' in options && (options === null || options === void 0 ? void 0 : options.chainId) || chainId;\n  const {\n    promiseTransaction,\n    state,\n    resetState\n  } = usePromiseTransaction(transactionChainId, options);\n  const config = useConfig();\n  const gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;\n  const providers = useReadonlyNetworks();\n  const provider = transactionChainId && providers[transactionChainId];\n  const sendTransaction = async transactionRequest => {\n    var _a, _b, _c;\n    const signer = getSignerFromOptions(provider, options, library);\n    if (signer) {\n      const gasLimit = await estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage);\n      const sanitizedTransaction = sanitizeTransactionRequest(Object.assign(Object.assign({}, transactionRequest), {\n        gasLimit\n      }));\n      return promiseTransaction(signer.sendTransaction(sanitizedTransaction), {\n        safeTransaction: {\n          to: sanitizedTransaction.to,\n          value: (_a = sanitizedTransaction.value) === null || _a === void 0 ? void 0 : _a.toString(),\n          data: (_b = sanitizedTransaction.data) === null || _b === void 0 ? void 0 : _b.toString(),\n          safeTxGas: (_c = sanitizedTransaction.gasLimit) === null || _c === void 0 ? void 0 : _c.toString()\n        }\n      }, transactionRequest);\n    }\n  };\n  return {\n    sendTransaction,\n    state,\n    resetState\n  };\n}","map":{"version":3,"names":["useConfig","useEthers","estimateTransactionGasLimit","usePromiseTransaction","useReadonlyNetworks","getSignerFromOptions","sanitizeTransactionRequest","useSendTransaction","options","library","chainId","transactionChainId","promiseTransaction","state","resetState","config","gasLimitBufferPercentage","_c","_b","_a","bufferGasLimitPercentage","providers","provider","sendTransaction","transactionRequest","signer","gasLimit","sanitizedTransaction","Object","assign","safeTransaction","to","value","toString","data","safeTxGas"],"sources":["/Users/mcbood/Desktop/unitest/node_modules/@usedapp/core/src/hooks/useSendTransaction.ts"],"sourcesContent":["import type { TransactionRequest } from '@ethersproject/abstract-provider'\nimport { TransactionOptions } from '../model/TransactionOptions'\nimport { useConfig } from './useConfig'\nimport { useEthers } from './useEthers'\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction'\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context'\nimport { ChainId } from '../constants'\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions'\nimport { providers } from 'ethers'\nimport { sanitizeTransactionRequest } from '../helpers/gnosisSafeUtils'\n\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options?: TransactionOptions) {\n  const { library, chainId } = useEthers()\n  const transactionChainId = (options && 'chainId' in options && options?.chainId) || chainId\n  const { promiseTransaction, state, resetState } = usePromiseTransaction(transactionChainId, options)\n\n  const config = useConfig()\n  const gasLimitBufferPercentage =\n    options?.gasLimitBufferPercentage ?? options?.bufferGasLimitPercentage ?? config?.gasLimitBufferPercentage ?? 0\n\n  const providers = useReadonlyNetworks()\n  const provider = (transactionChainId && providers[transactionChainId as ChainId])!\n\n  const sendTransaction = async (transactionRequest: TransactionRequest) => {\n    const signer = getSignerFromOptions(provider as providers.BaseProvider, options, library)\n\n    if (signer) {\n      const gasLimit = await estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage)\n\n      const sanitizedTransaction = sanitizeTransactionRequest({\n        ...transactionRequest,\n        gasLimit,\n      })\n\n      return promiseTransaction(\n        signer.sendTransaction(sanitizedTransaction),\n        {\n          safeTransaction: {\n            to: sanitizedTransaction.to,\n            value: sanitizedTransaction.value?.toString(),\n            data: sanitizedTransaction.data?.toString(),\n            safeTxGas: sanitizedTransaction.gasLimit?.toString(),\n          },\n        },\n        transactionRequest\n      )\n    }\n  }\n\n  return { sendTransaction, state, resetState }\n}\n"],"mappings":"AAEA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,2BAA2B,EAAEC,qBAAqB,QAAQ,yBAAyB;AAC5F,SAASC,mBAAmB,QAAQ,+CAA+C;AAEnF,SAASC,oBAAoB,QAAQ,iCAAiC;AAEtE,SAASC,0BAA0B,QAAQ,4BAA4B;AAEvE;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUC,kBAAkBA,CAACC,OAA4B;;EAC7D,MAAM;IAAEC,OAAO;IAAEC;EAAO,CAAE,GAAGT,SAAS,EAAE;EACxC,MAAMU,kBAAkB,GAAIH,OAAO,IAAI,SAAS,IAAIA,OAAO,KAAIA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,OAAO,KAAKA,OAAO;EAC3F,MAAM;IAAEE,kBAAkB;IAAEC,KAAK;IAAEC;EAAU,CAAE,GAAGX,qBAAqB,CAACQ,kBAAkB,EAAEH,OAAO,CAAC;EAEpG,MAAMO,MAAM,GAAGf,SAAS,EAAE;EAC1B,MAAMgB,wBAAwB,GAC5B,CAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,GAAAX,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEQ,wBAAwB,cAAAG,EAAA,cAAAA,EAAA,GAAIX,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEY,wBAAwB,cAAAF,EAAA,cAAAA,EAAA,GAAIH,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,wBAAwB,cAAAC,EAAA,cAAAA,EAAA,GAAI,CAAC;EAEjH,MAAMI,SAAS,GAAGjB,mBAAmB,EAAE;EACvC,MAAMkB,QAAQ,GAAIX,kBAAkB,IAAIU,SAAS,CAACV,kBAA6B,CAAG;EAElF,MAAMY,eAAe,GAAG,MAAOC,kBAAsC,IAAI;;IACvE,MAAMC,MAAM,GAAGpB,oBAAoB,CAACiB,QAAkC,EAAEd,OAAO,EAAEC,OAAO,CAAC;IAEzF,IAAIgB,MAAM,EAAE;MACV,MAAMC,QAAQ,GAAG,MAAMxB,2BAA2B,CAACsB,kBAAkB,EAAEC,MAAM,EAAET,wBAAwB,CAAC;MAExG,MAAMW,oBAAoB,GAAGrB,0BAA0B,CAAAsB,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAClDL,kBAAkB;QACrBE;MAAQ,GACR;MAEF,OAAOd,kBAAkB,CACvBa,MAAM,CAACF,eAAe,CAACI,oBAAoB,CAAC,EAC5C;QACEG,eAAe,EAAE;UACfC,EAAE,EAAEJ,oBAAoB,CAACI,EAAE;UAC3BC,KAAK,EAAE,CAAAb,EAAA,GAAAQ,oBAAoB,CAACK,KAAK,cAAAb,EAAA,uBAAAA,EAAA,CAAEc,QAAQ,EAAE;UAC7CC,IAAI,EAAE,CAAAhB,EAAA,GAAAS,oBAAoB,CAACO,IAAI,cAAAhB,EAAA,uBAAAA,EAAA,CAAEe,QAAQ,EAAE;UAC3CE,SAAS,EAAE,CAAAlB,EAAA,GAAAU,oBAAoB,CAACD,QAAQ,cAAAT,EAAA,uBAAAA,EAAA,CAAEgB,QAAQ;;OAErD,EACDT,kBAAkB,CACnB;;EAEL,CAAC;EAED,OAAO;IAAED,eAAe;IAAEV,KAAK;IAAEC;EAAU,CAAE;AAC/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}