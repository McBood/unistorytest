{"ast":null,"code":"import { useReadonlyNetworks } from '../providers/network';\nimport { useChainId } from './useChainId';\n/**\n * Gets a readonly provider for specific chainId.\n * @param opts.chainId Requested chainId. If not provided, the currently connected wallet's chainId will be used or the default one from the config.\n * @returns An ethers.js provider or undefined.\n * @public\n */\nexport function useReadonlyNetwork() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    queryParams: {\n      chainId: opts.chainId\n    }\n  });\n  const providers = useReadonlyNetworks();\n  return providers[chainId] !== undefined && chainId !== undefined ? {\n    provider: providers[chainId],\n    chainId: chainId\n  } : undefined;\n}","map":{"version":3,"names":["useReadonlyNetworks","useChainId","useReadonlyNetwork","opts","arguments","length","undefined","chainId","queryParams","providers","provider"],"sources":["/Users/mcbood/Desktop/unitest/node_modules/@usedapp/core/src/hooks/useReadonlyProvider.tsx"],"sourcesContent":["import { ChainId } from '../constants'\nimport { useReadonlyNetworks } from '../providers/network'\nimport { useChainId } from './useChainId'\nimport type { providers } from 'ethers'\n\nexport interface UseReadonlyProviderOptions {\n  chainId?: number\n}\n\nexport interface ReadonlyNetwork {\n  provider: providers.BaseProvider\n  chainId: number\n}\n\n/**\n * Gets a readonly provider for specific chainId.\n * @param opts.chainId Requested chainId. If not provided, the currently connected wallet's chainId will be used or the default one from the config.\n * @returns An ethers.js provider or undefined.\n * @public\n */\nexport function useReadonlyNetwork(opts: UseReadonlyProviderOptions = {}): ReadonlyNetwork | undefined {\n  const chainId = useChainId({ queryParams: { chainId: opts.chainId } })\n  const providers = useReadonlyNetworks()\n  return providers[chainId as ChainId] !== undefined && chainId !== undefined\n    ? {\n        provider: providers[chainId as ChainId]!,\n        chainId: chainId,\n      }\n    : undefined\n}\n"],"mappings":"AACA,SAASA,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,UAAU,QAAQ,cAAc;AAYzC;;;;;;AAMA,OAAM,SAAUC,kBAAkBA,CAAA,EAAsC;EAAA,IAArCC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmC,EAAE;EACtE,MAAMG,OAAO,GAAGN,UAAU,CAAC;IAAEO,WAAW,EAAE;MAAED,OAAO,EAAEJ,IAAI,CAACI;IAAO;EAAE,CAAE,CAAC;EACtE,MAAME,SAAS,GAAGT,mBAAmB,EAAE;EACvC,OAAOS,SAAS,CAACF,OAAkB,CAAC,KAAKD,SAAS,IAAIC,OAAO,KAAKD,SAAS,GACvE;IACEI,QAAQ,EAAED,SAAS,CAACF,OAAkB,CAAE;IACxCA,OAAO,EAAEA;GACV,GACDD,SAAS;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}