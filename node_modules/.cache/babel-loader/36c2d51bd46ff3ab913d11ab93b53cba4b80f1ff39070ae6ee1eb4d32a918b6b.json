{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers } from '../../hooks';\nimport { NotificationsContext } from './context';\nimport { DEFAULT_NOTIFICATIONS } from './model';\nimport { notificationReducer } from './reducer';\nimport { useIsMounted } from '../../hooks/useIsMounted';\nimport { nanoid } from 'nanoid';\nexport function NotificationsProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS);\n  const isMounted = useIsMounted();\n  const {\n    chainId,\n    account\n  } = useEthers();\n  useEffect(() => {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account\n        }\n      });\n    }\n  }, [account, chainId]);\n  const addNotification = useCallback(_ref2 => {\n    let {\n      notification,\n      chainId\n    } = _ref2;\n    if (isMounted()) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId,\n        notification: Object.assign(Object.assign({}, notification), {\n          id: nanoid()\n        })\n      });\n    }\n  }, [dispatch]);\n  const removeNotification = useCallback(_ref3 => {\n    let {\n      notificationId,\n      chainId\n    } = _ref3;\n    if (isMounted()) {\n      dispatch({\n        type: 'REMOVE_NOTIFICATION',\n        chainId,\n        notificationId\n      });\n    }\n  }, [dispatch]);\n  return _jsx(NotificationsContext.Provider, {\n    value: {\n      addNotification,\n      notifications,\n      removeNotification\n    },\n    children: children\n  });\n}","map":{"version":3,"names":["useCallback","useEffect","useReducer","useEthers","NotificationsContext","DEFAULT_NOTIFICATIONS","notificationReducer","useIsMounted","nanoid","NotificationsProvider","_ref","children","notifications","dispatch","isMounted","chainId","account","type","notification","id","submittedAt","Date","now","address","addNotification","_ref2","Object","assign","removeNotification","_ref3","notificationId","_jsx","Provider","value"],"sources":["/Users/mcbood/Desktop/unitestask/node_modules/@usedapp/core/src/providers/notifications/provider.tsx"],"sourcesContent":["import { ReactNode, useCallback, useEffect, useReducer } from 'react'\nimport { useEthers } from '../../hooks'\nimport { NotificationsContext } from './context'\nimport { AddNotificationPayload, DEFAULT_NOTIFICATIONS, RemoveNotificationPayload } from './model'\nimport { notificationReducer } from './reducer'\nimport { useIsMounted } from '../../hooks/useIsMounted'\nimport { nanoid } from 'nanoid'\n\ninterface Props {\n  children: ReactNode\n}\n\nexport function NotificationsProvider({ children }: Props) {\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS)\n  const isMounted = useIsMounted()\n  const { chainId, account } = useEthers()\n\n  useEffect(() => {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account,\n        },\n      })\n    }\n  }, [account, chainId])\n\n  const addNotification = useCallback(\n    ({ notification, chainId }: AddNotificationPayload) => {\n      if (isMounted()) {\n        dispatch({\n          type: 'ADD_NOTIFICATION',\n          chainId,\n          notification: { ...notification, id: nanoid() },\n        })\n      }\n    },\n    [dispatch]\n  )\n\n  const removeNotification = useCallback(\n    ({ notificationId, chainId }: RemoveNotificationPayload) => {\n      if (isMounted()) {\n        dispatch({\n          type: 'REMOVE_NOTIFICATION',\n          chainId,\n          notificationId,\n        })\n      }\n    },\n    [dispatch]\n  )\n\n  return (\n    <NotificationsContext.Provider value={{ addNotification, notifications, removeNotification }} children={children} />\n  )\n}\n"],"mappings":";AAAA,SAAoBA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACrE,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,oBAAoB,QAAQ,WAAW;AAChD,SAAiCC,qBAAqB,QAAmC,SAAS;AAClG,SAASC,mBAAmB,QAAQ,WAAW;AAC/C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,MAAM,QAAQ,QAAQ;AAM/B,OAAM,SAAUC,qBAAqBA,CAAAC,IAAA,EAAoB;EAAA,IAAnB;IAAEC;EAAQ,CAAS,GAAAD,IAAA;EACvD,MAAM,CAACE,aAAa,EAAEC,QAAQ,CAAC,GAAGX,UAAU,CAACI,mBAAmB,EAAED,qBAAqB,CAAC;EACxF,MAAMS,SAAS,GAAGP,YAAY,EAAE;EAChC,MAAM;IAAEQ,OAAO;IAAEC;EAAO,CAAE,GAAGb,SAAS,EAAE;EAExCF,SAAS,CAAC,MAAK;IACb,IAAIe,OAAO,IAAID,OAAO,EAAE;MACtBF,QAAQ,CAAC;QACPI,IAAI,EAAE,kBAAkB;QACxBF,OAAO,EAAEA,OAAO;QAChBG,YAAY,EAAE;UACZD,IAAI,EAAE,iBAAiB;UACvBE,EAAE,EAAEX,MAAM,EAAE;UACZY,WAAW,EAAEC,IAAI,CAACC,GAAG,EAAE;UACvBC,OAAO,EAAEP;;OAEZ,CAAC;;EAEN,CAAC,EAAE,CAACA,OAAO,EAAED,OAAO,CAAC,CAAC;EAEtB,MAAMS,eAAe,GAAGxB,WAAW,CACjCyB,KAAA,IAAsD;IAAA,IAArD;MAAEP,YAAY;MAAEH;IAAO,CAA0B,GAAAU,KAAA;IAChD,IAAIX,SAAS,EAAE,EAAE;MACfD,QAAQ,CAAC;QACPI,IAAI,EAAE,kBAAkB;QACxBF,OAAO;QACPG,YAAY,EAAAQ,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAOT,YAAY;UAAEC,EAAE,EAAEX,MAAM;QAAE;OAC9C,CAAC;;EAEN,CAAC,EACD,CAACK,QAAQ,CAAC,CACX;EAED,MAAMe,kBAAkB,GAAG5B,WAAW,CACpC6B,KAAA,IAA2D;IAAA,IAA1D;MAAEC,cAAc;MAAEf;IAAO,CAA6B,GAAAc,KAAA;IACrD,IAAIf,SAAS,EAAE,EAAE;MACfD,QAAQ,CAAC;QACPI,IAAI,EAAE,qBAAqB;QAC3BF,OAAO;QACPe;OACD,CAAC;;EAEN,CAAC,EACD,CAACjB,QAAQ,CAAC,CACX;EAED,OACEkB,IAAA,CAAC3B,oBAAoB,CAAC4B,QAAQ;IAACC,KAAK,EAAE;MAAET,eAAe;MAAEZ,aAAa;MAAEgB;IAAkB,CAAE;IAAEjB,QAAQ,EAAEA;EAAQ,EAAI;AAExH"},"metadata":{},"sourceType":"module","externalDependencies":[]}