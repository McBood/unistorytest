{"ast":null,"code":"import { utils } from 'ethers';\nimport { BigNumber } from 'ethers';\nimport { shortenString } from './common';\n/**\n * @public\n */\nexport function shortenAddress(address) {\n  try {\n    const formattedAddress = utils.getAddress(address);\n    return shortenString(formattedAddress);\n  } catch (_a) {\n    throw new TypeError(\"Invalid input, address can't be parsed\");\n  }\n}\n/**\n * @public\n */\nexport function shortenIfAddress(address) {\n  if (typeof address === 'string' && address.length > 0) {\n    return shortenAddress(address);\n  }\n  return '';\n}\n/**\n * @public\n */\nexport function compareAddress(firstAddress, secondAddress) {\n  try {\n    const parsedFirstAddress = BigNumber.from(firstAddress);\n    const parsedSecondAddress = BigNumber.from(secondAddress);\n    if (parsedFirstAddress.gt(parsedSecondAddress)) {\n      return 1;\n    }\n    if (parsedFirstAddress.lt(parsedSecondAddress)) {\n      return -1;\n    }\n    return 0;\n  } catch (_a) {\n    throw new TypeError(\"Invalid input, address can't be parsed\");\n  }\n}\n/**\n * @public\n */\nexport function addressEqual(firstAddress, secondAddress) {\n  try {\n    return utils.getAddress(firstAddress) === utils.getAddress(secondAddress);\n  } catch (_a) {\n    throw new TypeError(\"Invalid input, address can't be parsed\");\n  }\n}","map":{"version":3,"names":["utils","BigNumber","shortenString","shortenAddress","address","formattedAddress","getAddress","_a","TypeError","shortenIfAddress","length","compareAddress","firstAddress","secondAddress","parsedFirstAddress","from","parsedSecondAddress","gt","lt","addressEqual"],"sources":["/Users/mcbood/Desktop/unitestask/node_modules/@usedapp/core/src/helpers/address.ts"],"sourcesContent":["import { utils } from 'ethers'\nimport { BigNumber } from 'ethers'\nimport { Falsy } from '../model/types'\nimport { shortenString } from './common'\n\n/**\n * @public\n */\nexport function shortenAddress(address: string): string {\n  try {\n    const formattedAddress = utils.getAddress(address)\n    return shortenString(formattedAddress)\n  } catch {\n    throw new TypeError(\"Invalid input, address can't be parsed\")\n  }\n}\n\n/**\n * @public\n */\nexport function shortenIfAddress(address: string | Falsy): string {\n  if (typeof address === 'string' && address.length > 0) {\n    return shortenAddress(address)\n  }\n  return ''\n}\n\n/**\n * @public\n */\nexport function compareAddress(firstAddress: string, secondAddress: string): number {\n  try {\n    const parsedFirstAddress = BigNumber.from(firstAddress)\n    const parsedSecondAddress = BigNumber.from(secondAddress)\n\n    if (parsedFirstAddress.gt(parsedSecondAddress)) {\n      return 1\n    }\n\n    if (parsedFirstAddress.lt(parsedSecondAddress)) {\n      return -1\n    }\n\n    return 0\n  } catch {\n    throw new TypeError(\"Invalid input, address can't be parsed\")\n  }\n}\n\n/**\n * @public\n */\nexport function addressEqual(firstAddress: string, secondAddress: string): boolean {\n  try {\n    return utils.getAddress(firstAddress) === utils.getAddress(secondAddress)\n  } catch {\n    throw new TypeError(\"Invalid input, address can't be parsed\")\n  }\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,QAAQ;AAC9B,SAASC,SAAS,QAAQ,QAAQ;AAElC,SAASC,aAAa,QAAQ,UAAU;AAExC;;;AAGA,OAAM,SAAUC,cAAcA,CAACC,OAAe;EAC5C,IAAI;IACF,MAAMC,gBAAgB,GAAGL,KAAK,CAACM,UAAU,CAACF,OAAO,CAAC;IAClD,OAAOF,aAAa,CAACG,gBAAgB,CAAC;GACvC,CAAC,OAAAE,EAAA,EAAM;IACN,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;;AAEjE;AAEA;;;AAGA,OAAM,SAAUC,gBAAgBA,CAACL,OAAuB;EACtD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACM,MAAM,GAAG,CAAC,EAAE;IACrD,OAAOP,cAAc,CAACC,OAAO,CAAC;;EAEhC,OAAO,EAAE;AACX;AAEA;;;AAGA,OAAM,SAAUO,cAAcA,CAACC,YAAoB,EAAEC,aAAqB;EACxE,IAAI;IACF,MAAMC,kBAAkB,GAAGb,SAAS,CAACc,IAAI,CAACH,YAAY,CAAC;IACvD,MAAMI,mBAAmB,GAAGf,SAAS,CAACc,IAAI,CAACF,aAAa,CAAC;IAEzD,IAAIC,kBAAkB,CAACG,EAAE,CAACD,mBAAmB,CAAC,EAAE;MAC9C,OAAO,CAAC;;IAGV,IAAIF,kBAAkB,CAACI,EAAE,CAACF,mBAAmB,CAAC,EAAE;MAC9C,OAAO,CAAC,CAAC;;IAGX,OAAO,CAAC;GACT,CAAC,OAAAT,EAAA,EAAM;IACN,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;;AAEjE;AAEA;;;AAGA,OAAM,SAAUW,YAAYA,CAACP,YAAoB,EAAEC,aAAqB;EACtE,IAAI;IACF,OAAOb,KAAK,CAACM,UAAU,CAACM,YAAY,CAAC,KAAKZ,KAAK,CAACM,UAAU,CAACO,aAAa,CAAC;GAC1E,CAAC,OAAAN,EAAA,EAAM;IACN,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;;AAEjE"},"metadata":{},"sourceType":"module","externalDependencies":[]}