{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/mcbood/Desktop/unitest/node_modules/@usedapp/core/src/constants/type/Chain.ts"],"sourcesContent":["/**\n * Represents the chain type.\n *\n * @public\n */\nexport interface Chain {\n  /**\n   * The ID of the chain. Every chain has a unique chainId.\n   */\n  chainId: number\n  /**\n   * The name of the chain.\n   */\n  chainName: string\n  /**\n   * Whether the chain is a testnet, such as Kovan or Ropsten.\n   */\n  isTestChain: boolean\n  /**\n   * Whether the chain is a development chain running on localhost.\n   */\n  isLocalChain: boolean\n  /**\n   * An address of the Multicall contract on the chain.\n   */\n  multicallAddress: string\n  /**\n   * An address of the Multicall2 contract on the chain.\n   */\n  multicall2Address?: string\n  /**\n   * The URL of the network's RPC provider, used (required) for adding the network to Metamask\n   */\n  rpcUrl?: string\n  /**\n   * The URL of the network's block explorer, used for adding the network to Metamask\n   */\n  blockExplorerUrl?: string\n  /**\n   * The network's currency, used for adding the network to Metamask\n   */\n  nativeCurrency?: {\n    name: string\n    symbol: string\n    decimals: number\n  }\n  /**\n   * A function to construct a link to a blockchain explorer, based on an ethereum address.\n   */\n  getExplorerAddressLink: (address: string) => string\n  /**\n   * A function to construct a link to a blockchain explorer, based on a transaction hash.\n   */\n  getExplorerTransactionLink: (address: string) => string\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}