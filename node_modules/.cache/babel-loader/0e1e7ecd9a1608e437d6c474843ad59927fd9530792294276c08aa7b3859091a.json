{"ast":null,"code":"import { useMemo } from 'react';\nimport { useTransactionsContext } from '../providers';\nimport { useEthers } from './useEthers';\n/**\n * `useTransactions` hook returns a list `transactions`. This list contains\n * all transactions that were sent using {@link useContractFunction} and {@link useSendTransaction}.\n * Transactions are stored in local storage and the status is rechecked on every new block.\n *\n * Each transaction has following type:\n *\n * ```\n * export interface StoredTransaction {\n *   transaction: TransactionResponse\n *   submittedAt: number\n *   receipt?: TransactionReceipt\n *   lastCheckedBlockNumber?: number\n *   transactionName?: string\n *   originalTransaction?: TransactionResponse\n * }\n * ```\n *\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n * @public\n */\nexport function useTransactions() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    chainId: defaultChainId,\n    account\n  } = useEthers();\n  const {\n    addTransaction,\n    transactions\n  } = useTransactionsContext();\n  const {\n    chainId: _chainId\n  } = queryParams;\n  const chainId = useMemo(() => _chainId !== null && _chainId !== void 0 ? _chainId : defaultChainId, [_chainId, defaultChainId]);\n  const filtered = useMemo(() => {\n    var _a;\n    if (chainId === undefined || !account) {\n      return [];\n    }\n    return ((_a = transactions[chainId]) !== null && _a !== void 0 ? _a : []).filter(x => x.transaction.from === account);\n  }, [transactions, chainId, account]);\n  return {\n    transactions: filtered,\n    addTransaction\n  };\n}","map":{"version":3,"names":["useMemo","useTransactionsContext","useEthers","useTransactions","queryParams","arguments","length","undefined","chainId","defaultChainId","account","addTransaction","transactions","_chainId","filtered","_a","filter","x","transaction","from"],"sources":["/Users/mcbood/Desktop/unitestask/node_modules/@usedapp/core/src/hooks/useTransactions.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { useTransactionsContext } from '../providers'\nimport { useEthers } from './useEthers'\n\n/**\n * `useTransactions` hook returns a list `transactions`. This list contains\n * all transactions that were sent using {@link useContractFunction} and {@link useSendTransaction}.\n * Transactions are stored in local storage and the status is rechecked on every new block.\n *\n * Each transaction has following type:\n *\n * ```\n * export interface StoredTransaction {\n *   transaction: TransactionResponse\n *   submittedAt: number\n *   receipt?: TransactionReceipt\n *   lastCheckedBlockNumber?: number\n *   transactionName?: string\n *   originalTransaction?: TransactionResponse\n * }\n * ```\n *\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n * @public\n */\nexport function useTransactions(queryParams: QueryParams = {}) {\n  const { chainId: defaultChainId, account } = useEthers()\n  const { addTransaction, transactions } = useTransactionsContext()\n  const { chainId: _chainId } = queryParams\n\n  const chainId = useMemo(() => _chainId ?? defaultChainId, [_chainId, defaultChainId])\n\n  const filtered = useMemo(() => {\n    if (chainId === undefined || !account) {\n      return []\n    }\n    return (transactions[chainId] ?? []).filter((x) => x.transaction.from === account)\n  }, [transactions, chainId, account])\n\n  return {\n    transactions: filtered,\n    addTransaction,\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAE/B,SAASC,sBAAsB,QAAQ,cAAc;AACrD,SAASC,SAAS,QAAQ,aAAa;AAEvC;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUC,eAAeA,CAAA,EAA8B;EAAA,IAA7BC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;EAC3D,MAAM;IAAEG,OAAO,EAAEC,cAAc;IAAEC;EAAO,CAAE,GAAGR,SAAS,EAAE;EACxD,MAAM;IAAES,cAAc;IAAEC;EAAY,CAAE,GAAGX,sBAAsB,EAAE;EACjE,MAAM;IAAEO,OAAO,EAAEK;EAAQ,CAAE,GAAGT,WAAW;EAEzC,MAAMI,OAAO,GAAGR,OAAO,CAAC,MAAMa,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAIJ,cAAc,EAAE,CAACI,QAAQ,EAAEJ,cAAc,CAAC,CAAC;EAErF,MAAMK,QAAQ,GAAGd,OAAO,CAAC,MAAK;;IAC5B,IAAIQ,OAAO,KAAKD,SAAS,IAAI,CAACG,OAAO,EAAE;MACrC,OAAO,EAAE;;IAEX,OAAO,CAAC,CAAAK,EAAA,GAAAH,YAAY,CAACJ,OAAO,CAAC,cAAAO,EAAA,cAAAA,EAAA,GAAI,EAAE,EAAEC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,WAAW,CAACC,IAAI,KAAKT,OAAO,CAAC;EACpF,CAAC,EAAE,CAACE,YAAY,EAAEJ,OAAO,EAAEE,OAAO,CAAC,CAAC;EAEpC,OAAO;IACLE,YAAY,EAAEE,QAAQ;IACtBH;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}