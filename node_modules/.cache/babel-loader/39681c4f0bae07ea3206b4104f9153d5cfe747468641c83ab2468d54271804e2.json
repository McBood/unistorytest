{"ast":null,"code":"import { providers } from 'ethers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { Event } from '../../../../helpers/event';\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport async function getMetamaskProvider() {\n  var _a;\n  if (!window.ethereum) {\n    window.open(GET_METAMASK_LINK);\n    return undefined;\n  }\n  const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum.providers) || [];\n  const injectedProvider = (_a = injectedProviders.find(provider => {\n    var _a;\n    return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n  })) !== null && _a !== void 0 ? _a : await detectEthereumProvider();\n  if (!injectedProvider) {\n    console.log(`Metamask is not installed - you can get it under ${GET_METAMASK_LINK}`);\n    return undefined;\n  }\n  const provider = new providers.Web3Provider(injectedProvider, 'any');\n  return provider;\n}\nexport class MetamaskConnector {\n  constructor() {\n    this.name = 'Metamask';\n    this.update = new Event();\n  }\n  async init() {\n    if (this.provider) return;\n    const metamask = await getMetamaskProvider();\n    if (!metamask) {\n      return;\n    }\n    this.provider = metamask;\n  }\n  async connectEagerly() {\n    await this.init();\n    if (!this.provider) {\n      return;\n    }\n    try {\n      const chainId = await this.provider.send('eth_chainId', []);\n      const accounts = await this.provider.send('eth_accounts', []);\n      this.update.emit({\n        chainId: parseInt(chainId),\n        accounts\n      });\n    } catch (e) {\n      console.debug(e);\n    }\n  }\n  async activate() {\n    var _a;\n    await this.init();\n    if (!this.provider) {\n      throw new Error('Could not activate connector');\n    }\n    try {\n      const chainId = await this.provider.send('eth_chainId', []);\n      const accounts = await this.provider.send('eth_requestAccounts', []);\n      this.update.emit({\n        chainId: parseInt(chainId),\n        accounts\n      });\n    } catch (e) {\n      console.log(e);\n      throw new Error('Could not activate connector: ' + ((_a = e.message) !== null && _a !== void 0 ? _a : ''));\n    }\n  }\n  async deactivate() {\n    this.provider = undefined;\n  }\n}","map":{"version":3,"names":["providers","detectEthereumProvider","Event","GET_METAMASK_LINK","getMetamaskProvider","window","ethereum","open","undefined","injectedProviders","injectedProvider","_a","find","provider","isMetaMask","console","log","Web3Provider","MetamaskConnector","constructor","name","update","init","metamask","connectEagerly","chainId","send","accounts","emit","parseInt","e","debug","activate","Error","message","deactivate"],"sources":["/Users/mcbood/Desktop/unitest/node_modules/@usedapp/core/src/providers/network/connectors/implementations/metamask.ts"],"sourcesContent":["import { Connector, ConnectorUpdateData } from '../connector'\nimport { providers } from 'ethers'\nimport detectEthereumProvider from '@metamask/detect-provider'\nimport { Event } from '../../../../helpers/event'\n\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html'\n\nexport async function getMetamaskProvider() {\n  if (!(window as any).ethereum) {\n    window.open(GET_METAMASK_LINK)\n    return undefined\n  }\n\n  const injectedProviders: any[] = (window as any)?.ethereum.providers || []\n  const injectedProvider: any =\n    injectedProviders.find((provider) => {\n      return provider.isMetaMask ?? false\n    }) ?? (await detectEthereumProvider())\n\n  if (!injectedProvider) {\n    console.log(`Metamask is not installed - you can get it under ${GET_METAMASK_LINK}`)\n    return undefined\n  }\n\n  const provider = new providers.Web3Provider(injectedProvider, 'any')\n  return provider\n}\n\nexport class MetamaskConnector implements Connector {\n  public provider?: providers.Web3Provider\n  public readonly name = 'Metamask'\n\n  readonly update = new Event<ConnectorUpdateData>()\n\n  private async init() {\n    if (this.provider) return\n    const metamask = await getMetamaskProvider()\n    if (!metamask) {\n      return\n    }\n    this.provider = metamask\n  }\n\n  async connectEagerly(): Promise<void> {\n    await this.init()\n\n    if (!this.provider) {\n      return\n    }\n\n    try {\n      const chainId: string = await this.provider!.send('eth_chainId', [])\n      const accounts: string[] = await this.provider!.send('eth_accounts', [])\n      this.update.emit({ chainId: parseInt(chainId), accounts })\n    } catch (e) {\n      console.debug(e)\n    }\n  }\n\n  async activate(): Promise<void> {\n    await this.init()\n\n    if (!this.provider) {\n      throw new Error('Could not activate connector')\n    }\n\n    try {\n      const chainId: string = await this.provider!.send('eth_chainId', [])\n      const accounts: string[] = await this.provider!.send('eth_requestAccounts', [])\n      this.update.emit({ chainId: parseInt(chainId), accounts })\n    } catch (e: any) {\n      console.log(e)\n      throw new Error('Could not activate connector: ' + (e.message ?? ''))\n    }\n  }\n\n  async deactivate(): Promise<void> {\n    this.provider = undefined\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}