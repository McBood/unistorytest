{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumber, useBlockNumbers } from '../hooks';\n/**\n * Returns gas price of current network.\n * @public\n * @returns gas price of current network. `undefined` if not initialised.\n */\nexport function useGasPrice() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    library\n  } = useEthers();\n  const providers = useReadonlyNetworks();\n  const _blockNumber = useBlockNumber();\n  const blockNumbers = useBlockNumbers();\n  const [gasPrice, setGasPrice] = useState();\n  const {\n    chainId\n  } = queryParams;\n  const [provider, blockNumber] = useMemo(() => chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber], [providers, library, blockNumbers, _blockNumber]);\n  async function updateGasPrice() {\n    setGasPrice(await (provider === null || provider === void 0 ? void 0 : provider.getGasPrice()));\n  }\n  useEffect(() => {\n    void updateGasPrice();\n  }, [provider, blockNumber]);\n  return gasPrice;\n}","map":{"version":3,"names":["useEffect","useMemo","useState","useEthers","useReadonlyNetworks","useBlockNumber","useBlockNumbers","useGasPrice","queryParams","arguments","length","undefined","library","providers","_blockNumber","blockNumbers","gasPrice","setGasPrice","chainId","provider","blockNumber","updateGasPrice","getGasPrice"],"sources":["/Users/mcbood/Desktop/unitest/node_modules/@usedapp/core/src/hooks/useGasPrice.ts"],"sourcesContent":["import { BigNumber } from 'ethers'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useEthers } from './useEthers'\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks'\nimport { useBlockNumber, useBlockNumbers } from '../hooks'\nimport { QueryParams } from '../constants/type/QueryParams'\n\n/**\n * Returns gas price of current network.\n * @public\n * @returns gas price of current network. `undefined` if not initialised.\n */\nexport function useGasPrice(queryParams: QueryParams = {}): BigNumber | undefined {\n  const { library } = useEthers()\n  const providers = useReadonlyNetworks()\n  const _blockNumber = useBlockNumber()\n  const blockNumbers = useBlockNumbers()\n\n  const [gasPrice, setGasPrice] = useState<BigNumber | undefined>()\n\n  const { chainId } = queryParams\n\n  const [provider, blockNumber] = useMemo(\n    () => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]),\n    [providers, library, blockNumbers, _blockNumber]\n  )\n\n  async function updateGasPrice() {\n    setGasPrice(await provider?.getGasPrice())\n  }\n\n  useEffect(() => {\n    void updateGasPrice()\n  }, [provider, blockNumber])\n\n  return gasPrice\n}\n"],"mappings":"AACA,SAASA,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACpD,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,mBAAmB,QAAQ,uCAAuC;AAC3E,SAASC,cAAc,EAAEC,eAAe,QAAQ,UAAU;AAG1D;;;;;AAKA,OAAM,SAAUC,WAAWA,CAAA,EAA8B;EAAA,IAA7BC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;EACvD,MAAM;IAAEG;EAAO,CAAE,GAAGT,SAAS,EAAE;EAC/B,MAAMU,SAAS,GAAGT,mBAAmB,EAAE;EACvC,MAAMU,YAAY,GAAGT,cAAc,EAAE;EACrC,MAAMU,YAAY,GAAGT,eAAe,EAAE;EAEtC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,EAAyB;EAEjE,MAAM;IAAEgB;EAAO,CAAE,GAAGV,WAAW;EAE/B,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,OAAO,CACrC,MAAOiB,OAAO,GAAG,CAACL,SAAS,CAACK,OAAO,CAAC,EAAEH,YAAY,CAACG,OAAO,CAAC,CAAC,GAAG,CAACN,OAAO,EAAEE,YAAY,CAAE,EACvF,CAACD,SAAS,EAAED,OAAO,EAAEG,YAAY,EAAED,YAAY,CAAC,CACjD;EAED,eAAeO,cAAcA,CAAA;IAC3BJ,WAAW,CAAC,OAAME,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,WAAW,EAAE,EAAC;EAC5C;EAEAtB,SAAS,CAAC,MAAK;IACb,KAAKqB,cAAc,EAAE;EACvB,CAAC,EAAE,CAACF,QAAQ,EAAEC,WAAW,CAAC,CAAC;EAE3B,OAAOJ,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}