{"ast":null,"code":"import { useEthers } from './useEthers';\nimport { useState, useEffect } from 'react';\n/**\n * Returns a signer if an external wallet is connected.\n * @public\n * @returns a JsonRpcSigner if one is available in the provider. `undefined` otherwise.\n */\nexport function useSigner() {\n  const {\n    library,\n    account\n  } = useEthers();\n  const [signer, setSigner] = useState();\n  useEffect(() => {\n    if (library !== undefined && 'getSigner' in library && account !== undefined) setSigner(library.getSigner());else setSigner(undefined);\n  }, [library, account]);\n  return signer;\n}","map":{"version":3,"names":["useEthers","useState","useEffect","useSigner","library","account","signer","setSigner","undefined","getSigner"],"sources":["/Users/mcbood/Desktop/unitestask/node_modules/@usedapp/core/src/hooks/useSigner.ts"],"sourcesContent":["import { useEthers } from './useEthers'\nimport { useState, useEffect } from 'react'\nimport { JsonRpcSigner } from '@ethersproject/providers'\n\n/**\n * Returns a signer if an external wallet is connected.\n * @public\n * @returns a JsonRpcSigner if one is available in the provider. `undefined` otherwise.\n */\nexport function useSigner(): JsonRpcSigner | undefined {\n  const { library, account } = useEthers()\n  const [signer, setSigner] = useState<JsonRpcSigner | undefined>()\n\n  useEffect(() => {\n    if (library !== undefined && 'getSigner' in library && account !== undefined) setSigner(library.getSigner())\n    else setSigner(undefined)\n  }, [library, account])\n\n  return signer\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAG3C;;;;;AAKA,OAAM,SAAUC,SAASA,CAAA;EACvB,MAAM;IAAEC,OAAO;IAAEC;EAAO,CAAE,GAAGL,SAAS,EAAE;EACxC,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,EAA6B;EAEjEC,SAAS,CAAC,MAAK;IACb,IAAIE,OAAO,KAAKI,SAAS,IAAI,WAAW,IAAIJ,OAAO,IAAIC,OAAO,KAAKG,SAAS,EAAED,SAAS,CAACH,OAAO,CAACK,SAAS,EAAE,CAAC,MACvGF,SAAS,CAACC,SAAS,CAAC;EAC3B,CAAC,EAAE,CAACJ,OAAO,EAAEC,OAAO,CAAC,CAAC;EAEtB,OAAOC,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}