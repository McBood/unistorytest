{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function blockNumberReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const current = state[action.chainId];\n  if (!current || action.blockNumber > current) {\n    return Object.assign(Object.assign({}, state), {\n      [action.chainId]: action.blockNumber\n    });\n  }\n  return state;\n}","map":{"version":3,"names":["blockNumberReducer","state","arguments","length","undefined","action","current","chainId","blockNumber","Object","assign"],"sources":["/Users/mcbood/Desktop/unitestask/node_modules/@usedapp/core/src/providers/blockNumber/common/reducer.ts"],"sourcesContent":["interface BlockNumberState {\n  [chainId: number]: number | undefined\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport interface BlockNumberChanged {\n  chainId: number\n  blockNumber: number\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function blockNumberReducer(state: BlockNumberState = {}, action: BlockNumberChanged) {\n  const current = state[action.chainId]\n  if (!current || action.blockNumber > current) {\n    return {\n      ...state,\n      [action.chainId]: action.blockNumber,\n    }\n  }\n  return state\n}\n"],"mappings":"AAYA;;;AAGA,OAAM,SAAUA,kBAAkBA,CAAA,EAAyD;EAAA,IAAxDC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA0B,EAAE;EAAA,IAAEG,MAA0B,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACzF,MAAME,OAAO,GAAGL,KAAK,CAACI,MAAM,CAACE,OAAO,CAAC;EACrC,IAAI,CAACD,OAAO,IAAID,MAAM,CAACG,WAAW,GAAGF,OAAO,EAAE;IAC5C,OAAAG,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKT,KAAK;MACR,CAACI,MAAM,CAACE,OAAO,GAAGF,MAAM,CAACG;IAAW;;EAGxC,OAAOP,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}