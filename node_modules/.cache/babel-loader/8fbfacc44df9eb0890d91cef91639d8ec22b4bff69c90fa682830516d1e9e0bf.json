{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/mcbood/Desktop/unitest/node_modules/@usedapp/core/src/model/types.ts"],"sourcesContent":["/* eslint-disable */\nimport { Contract, ContractTransaction } from \"ethers\"\n\nexport type Falsy = false | 0 | '' | null | undefined\n\nexport type TypedContract = Contract & {\n    functions: Record<string, (...args: any[]) => any>,\n    filters: Record<string, (...args: any[]) => any>\n}\n\nexport type ContractFunctionNames<T extends TypedContract> = keyof { [P in keyof T['functions'] as ReturnType<T['functions'][P]> extends Promise<ContractTransaction> ? P : never] : void } & string\n\nexport type ContractMethodNames<T extends TypedContract> = keyof { [P in keyof T['functions'] as ReturnType<T['functions'][P]> extends Promise<any[]> ? P : never]: void } & string\n\nexport type ContractEventNames<T extends TypedContract> = keyof { [P in keyof T['filters']]: void } & string\n\nexport type Params<T extends TypedContract, FN extends ContractFunctionNames<T> | ContractMethodNames<T>> = Parameters<T['functions'][FN]>\n\nexport type EventParams<T extends TypedContract, EN extends ContractEventNames<T>> = Parameters<T['filters'][EN]>\n\nexport type EventRecord<T extends TypedContract, EN extends ContractEventNames<T>> = { [P in keyof EventParams<T, EN> as string]: any }\n\nexport type DetailedEventRecord<T extends TypedContract, EN extends ContractEventNames<T>> = {\n    data: EventRecord<T, EN>,\n    blockNumber: number,\n    blockHash: string,\n    transactionIndex: number,\n    transactionHash: string,\n    removed: boolean,\n}\n\nexport type Awaited<T> = T extends PromiseLike<infer U> ? U : T\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}