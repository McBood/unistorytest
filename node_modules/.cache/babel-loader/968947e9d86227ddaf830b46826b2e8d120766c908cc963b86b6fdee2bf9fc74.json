{"ast":null,"code":"import detectEthereumProvider from '@metamask/detect-provider';\nimport { providers } from 'ethers';\nimport { isWebSocketProvider } from './isWebSocketProvider';\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport async function getInjectedProvider(getPollingInterval) {\n  var _a;\n  if (!window.ethereum) {\n    window.open(GET_METAMASK_LINK);\n    return undefined;\n  }\n  const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum.providers) || [];\n  const injectedProvider = (_a = injectedProviders.find(provider => {\n    var _a;\n    return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n  })) !== null && _a !== void 0 ? _a : await detectEthereumProvider();\n  if (!injectedProvider) {\n    window.open(GET_METAMASK_LINK);\n    return undefined;\n  }\n  const provider = new providers.Web3Provider(injectedProvider, 'any');\n  const chainId = await provider.send('eth_chainId', []);\n  if (!isWebSocketProvider(provider)) {\n    provider.pollingInterval = getPollingInterval(chainId);\n  }\n  return provider;\n}","map":{"version":3,"names":["detectEthereumProvider","providers","isWebSocketProvider","GET_METAMASK_LINK","getInjectedProvider","getPollingInterval","window","ethereum","open","undefined","injectedProviders","injectedProvider","_a","find","provider","isMetaMask","Web3Provider","chainId","send","pollingInterval"],"sources":["/Users/mcbood/Desktop/unitest/node_modules/@usedapp/core/src/helpers/injectedProvider.ts"],"sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider'\nimport { providers } from 'ethers'\nimport { isWebSocketProvider } from './isWebSocketProvider'\n\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html'\n\nexport async function getInjectedProvider(getPollingInterval: (chaindId: number) => number) {\n  if (!(window as any).ethereum) {\n    window.open(GET_METAMASK_LINK)\n    return undefined\n  }\n\n  const injectedProviders: any[] = (window as any)?.ethereum.providers || []\n  const injectedProvider: any =\n    injectedProviders.find((provider) => {\n      return provider.isMetaMask ?? false\n    }) ?? (await detectEthereumProvider())\n\n  if (!injectedProvider) {\n    window.open(GET_METAMASK_LINK)\n    return undefined\n  }\n\n  const provider = new providers.Web3Provider(injectedProvider, 'any')\n  const chainId = await provider.send('eth_chainId', [])\n  if (!isWebSocketProvider(provider)) {\n    provider.pollingInterval = getPollingInterval(chainId)\n  }\n  return provider\n}\n"],"mappings":"AAAA,OAAOA,sBAAsB,MAAM,2BAA2B;AAC9D,SAASC,SAAS,QAAQ,QAAQ;AAClC,SAASC,mBAAmB,QAAQ,uBAAuB;AAE3D,MAAMC,iBAAiB,GAAG,mCAAmC;AAE7D,OAAO,eAAeC,mBAAmBA,CAACC,kBAAgD;;EACxF,IAAI,CAAEC,MAAc,CAACC,QAAQ,EAAE;IAC7BD,MAAM,CAACE,IAAI,CAACL,iBAAiB,CAAC;IAC9B,OAAOM,SAAS;;EAGlB,MAAMC,iBAAiB,GAAU,CAACJ,MAAc,aAAdA,MAAM,uBAANA,MAAM,CAAUC,QAAQ,CAACN,SAAS,KAAI,EAAE;EAC1E,MAAMU,gBAAgB,GACpB,CAAAC,EAAA,GAAAF,iBAAiB,CAACG,IAAI,CAAEC,QAAQ,IAAI;;IAClC,OAAO,CAAAF,EAAA,GAAAE,QAAQ,CAACC,UAAU,cAAAH,EAAA,cAAAA,EAAA,GAAI,KAAK;EACrC,CAAC,CAAC,cAAAA,EAAA,cAAAA,EAAA,GAAK,MAAMZ,sBAAsB,EAAG;EAExC,IAAI,CAACW,gBAAgB,EAAE;IACrBL,MAAM,CAACE,IAAI,CAACL,iBAAiB,CAAC;IAC9B,OAAOM,SAAS;;EAGlB,MAAMK,QAAQ,GAAG,IAAIb,SAAS,CAACe,YAAY,CAACL,gBAAgB,EAAE,KAAK,CAAC;EACpE,MAAMM,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;EACtD,IAAI,CAAChB,mBAAmB,CAACY,QAAQ,CAAC,EAAE;IAClCA,QAAQ,CAACK,eAAe,GAAGd,kBAAkB,CAACY,OAAO,CAAC;;EAExD,OAAOH,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}