{"ast":null,"code":"import { BigNumber } from 'ethers';\n/**\n * The `CurrencyValue` class represents a value tied to a currency. The methods include:\n * - `static fromString(currency, value)` - creates a new CurrencyValue from string.\n * - `static zero(currency)` - creates a new CurrencyValue equal to 0.\n * - `toString()` - returns the value of the CurrencyValue as a decimal string with no formatting.\n * - `format(overrideOptions?)` - formats the value according to the currency. The caller can override the formatting options.\n * - `map(fn)` - returns a new CurrencyValue with value transformed by the callback.\n * - `add(other)` - returns a new CurrencyValue with value being the sum of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `sub(other)` - returns a new CurrencyValue with value being the difference of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `mul(value)` - returns a new CurrencyValue with value multiplied by the argument.\n * - `div(value)` - returns a new CurrencyValue with value divided by the argument.\n * - `mod(value)` - returns a new CurrencyValue with value modulo the argument.\n * - `equals(other)` - performs an equality check on the currencies and the values of both objects.\n * - `lt(other)` - checks if this value is less than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `lte(other)` - checks if this value is less than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gt(other)` - checks if this value is greater than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gte(other)` - checks if this value is greater than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `isZero()` - returns true if the value is zero.\n *\n * @public\n */\nexport class CurrencyValue {\n  constructor(currency, value) {\n    this.currency = currency;\n    this.value = value;\n  }\n  static fromString(currency, value) {\n    return new CurrencyValue(currency, BigNumber.from(value));\n  }\n  static zero(currency) {\n    return new CurrencyValue(currency, BigNumber.from(0));\n  }\n  toString() {\n    return this.value.toString();\n  }\n  format() {\n    let overrideOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.currency.format(this.value.toString(), overrideOptions);\n  }\n  checkCurrency(other) {\n    if (this.currency !== other.currency) {\n      throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`);\n    }\n  }\n  map(fn) {\n    return new CurrencyValue(this.currency, fn(this.value));\n  }\n  add(other) {\n    this.checkCurrency(other);\n    return this.map(x => x.add(other.value));\n  }\n  sub(other) {\n    this.checkCurrency(other);\n    return this.map(x => x.sub(other.value));\n  }\n  mul(value) {\n    return this.map(x => x.mul(value));\n  }\n  div(value) {\n    return this.map(x => x.div(value));\n  }\n  mod(value) {\n    return this.map(x => x.mod(value));\n  }\n  equals(other) {\n    return this.currency === other.currency && this.value.eq(other.value);\n  }\n  lt(other) {\n    this.checkCurrency(other);\n    return this.value.lt(other.value);\n  }\n  lte(other) {\n    this.checkCurrency(other);\n    return this.value.lte(other.value);\n  }\n  gt(other) {\n    this.checkCurrency(other);\n    return this.value.gt(other.value);\n  }\n  gte(other) {\n    this.checkCurrency(other);\n    return this.value.gte(other.value);\n  }\n  isZero() {\n    return this.value.isZero();\n  }\n}","map":{"version":3,"names":["BigNumber","CurrencyValue","constructor","currency","value","fromString","from","zero","toString","format","overrideOptions","arguments","length","undefined","checkCurrency","other","TypeError","ticker","map","fn","add","x","sub","mul","div","mod","equals","eq","lt","lte","gt","gte","isZero"],"sources":["/Users/mcbood/Desktop/unitestask/node_modules/@usedapp/core/src/model/CurrencyValue.ts"],"sourcesContent":["import { BigNumber, BigNumberish } from 'ethers'\nimport { Currency } from './Currency'\nimport { CurrencyFormatOptions } from './formatting'\n\n/**\n * The `CurrencyValue` class represents a value tied to a currency. The methods include:\n * - `static fromString(currency, value)` - creates a new CurrencyValue from string.\n * - `static zero(currency)` - creates a new CurrencyValue equal to 0.\n * - `toString()` - returns the value of the CurrencyValue as a decimal string with no formatting.\n * - `format(overrideOptions?)` - formats the value according to the currency. The caller can override the formatting options.\n * - `map(fn)` - returns a new CurrencyValue with value transformed by the callback.\n * - `add(other)` - returns a new CurrencyValue with value being the sum of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `sub(other)` - returns a new CurrencyValue with value being the difference of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `mul(value)` - returns a new CurrencyValue with value multiplied by the argument.\n * - `div(value)` - returns a new CurrencyValue with value divided by the argument.\n * - `mod(value)` - returns a new CurrencyValue with value modulo the argument.\n * - `equals(other)` - performs an equality check on the currencies and the values of both objects.\n * - `lt(other)` - checks if this value is less than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `lte(other)` - checks if this value is less than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gt(other)` - checks if this value is greater than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gte(other)` - checks if this value is greater than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `isZero()` - returns true if the value is zero.\n *\n * @public\n */\nexport class CurrencyValue {\n  constructor(readonly currency: Currency, readonly value: BigNumber) {}\n\n  static fromString(currency: Currency, value: string) {\n    return new CurrencyValue(currency, BigNumber.from(value))\n  }\n\n  static zero(currency: Currency) {\n    return new CurrencyValue(currency, BigNumber.from(0))\n  }\n\n  toString() {\n    return this.value.toString()\n  }\n\n  format(overrideOptions: Partial<CurrencyFormatOptions> = {}) {\n    return this.currency.format(this.value.toString(), overrideOptions)\n  }\n\n  private checkCurrency(other: CurrencyValue) {\n    if (this.currency !== other.currency) {\n      throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`)\n    }\n  }\n\n  map(fn: (value: BigNumber) => BigNumber) {\n    return new CurrencyValue(this.currency, fn(this.value))\n  }\n\n  add(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.map((x) => x.add(other.value))\n  }\n\n  sub(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.map((x) => x.sub(other.value))\n  }\n\n  mul(value: BigNumberish) {\n    return this.map((x) => x.mul(value))\n  }\n\n  div(value: BigNumberish) {\n    return this.map((x) => x.div(value))\n  }\n\n  mod(value: BigNumberish) {\n    return this.map((x) => x.mod(value))\n  }\n\n  equals(other: CurrencyValue) {\n    return this.currency === other.currency && this.value.eq(other.value)\n  }\n\n  lt(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.lt(other.value)\n  }\n\n  lte(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.lte(other.value)\n  }\n\n  gt(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.gt(other.value)\n  }\n\n  gte(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.gte(other.value)\n  }\n\n  isZero() {\n    return this.value.isZero()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}