{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { Contract } from 'ethers';\n/**\n * `useLookupAddress` is a hook that is used to retrieve the ENS (e.g. `name.eth`) or Rave Names (e.g. `name.ftm`) for a specific address.\n * @param address address to lookup\n * @param options additional options\n * @returns {} Object with the following:\n  - `ens: string | null | undefined` - ENS or Rave name of the account or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n * @example\n * const { account } = useEthers()\n * const { ens } = useLookupAddress(account)\n *\n * return (\n *   <p>Account: {ens ?? account}</p>\n * )\n */\nexport function useLookupAddress(address) {\n  let {\n    rave\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    library\n  } = useEthers();\n  const [ens, setENS] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    let mounted = true;\n    void (async () => {\n      if (!library || !address) return;\n      try {\n        setIsLoading(true);\n        if (rave) {\n          const raveContract = new Contract('0x14Ffd1Fa75491595c6FD22De8218738525892101', [{\n            inputs: [{\n              internalType: 'address',\n              name: 'owner',\n              type: 'address'\n            }, {\n              internalType: 'uint256',\n              name: 'index',\n              type: 'uint256'\n            }],\n            name: 'getName',\n            outputs: [{\n              internalType: 'string',\n              name: '',\n              type: 'string'\n            }],\n            stateMutability: 'view',\n            type: 'function'\n          }], library);\n          // this call will fail anyway if the chain isn't Fantom, so we don't need an extra chainId check\n          const resolved = await raveContract.getName(address, 0);\n          if (!mounted) return;\n          setENS(resolved);\n        } else {\n          const resolved = await library.lookupAddress(address);\n          if (!mounted) return;\n          setENS(resolved);\n        }\n      } catch (e) {\n        if (!mounted) return;\n        setError(e);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, [address, library]);\n  return {\n    ens,\n    isLoading,\n    error\n  };\n}","map":{"version":3,"names":["useEffect","useState","useEthers","Contract","useLookupAddress","address","rave","arguments","length","undefined","library","ens","setENS","isLoading","setIsLoading","error","setError","mounted","raveContract","inputs","internalType","name","type","outputs","stateMutability","resolved","getName","lookupAddress","e"],"sources":["/Users/mcbood/Desktop/unitestask/node_modules/@usedapp/core/src/hooks/useLookupAddress.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useEthers } from './useEthers'\nimport { Contract } from 'ethers'\n\ninterface LookupAddressOptions {\n  rave?: boolean\n}\n\n/**\n * `useLookupAddress` is a hook that is used to retrieve the ENS (e.g. `name.eth`) or Rave Names (e.g. `name.ftm`) for a specific address.\n * @param address address to lookup \n * @param options additional options\n * @returns {} Object with the following:\n  - `ens: string | null | undefined` - ENS or Rave name of the account or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n * @example\n * const { account } = useEthers()\n * const { ens } = useLookupAddress(account)\n *\n * return (\n *   <p>Account: {ens ?? account}</p>\n * )\n */\nexport function useLookupAddress(address: string | undefined, { rave }: LookupAddressOptions = {}) {\n  const { library } = useEthers()\n  const [ens, setENS] = useState<string | null>()\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    let mounted = true\n\n    void (async () => {\n      if (!library || !address) return\n      try {\n        setIsLoading(true)\n        if (rave) {\n          const raveContract = new Contract(\n            '0x14Ffd1Fa75491595c6FD22De8218738525892101',\n            [\n              {\n                inputs: [\n                  { internalType: 'address', name: 'owner', type: 'address' },\n                  { internalType: 'uint256', name: 'index', type: 'uint256' },\n                ],\n                name: 'getName',\n                outputs: [{ internalType: 'string', name: '', type: 'string' }],\n                stateMutability: 'view',\n                type: 'function',\n              },\n            ],\n            library\n          )\n          // this call will fail anyway if the chain isn't Fantom, so we don't need an extra chainId check\n          const resolved = await raveContract.getName(address, 0)\n          if (!mounted) return\n          setENS(resolved)\n        } else {\n          const resolved = await library.lookupAddress(address)\n          if (!mounted) return\n          setENS(resolved)\n        }\n      } catch (e: any) {\n        if (!mounted) return\n        setError(e)\n      } finally {\n        setIsLoading(false)\n      }\n    })()\n\n    return () => {\n      mounted = false\n    }\n  }, [address, library])\n\n  return { ens, isLoading, error }\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,QAAQ,QAAQ,QAAQ;AAMjC;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUC,gBAAgBA,CAACC,OAA2B,EAAqC;EAAA,IAAnC;IAAEC;EAAI,IAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;EAC/F,MAAM;IAAEG;EAAO,CAAE,GAAGR,SAAS,EAAE;EAC/B,MAAM,CAACS,GAAG,EAAEC,MAAM,CAAC,GAAGX,QAAQ,EAAiB;EAC/C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAe,IAAI,CAAC;EAEtDD,SAAS,CAAC,MAAK;IACb,IAAIiB,OAAO,GAAG,IAAI;IAElB,KAAK,CAAC,YAAW;MACf,IAAI,CAACP,OAAO,IAAI,CAACL,OAAO,EAAE;MAC1B,IAAI;QACFS,YAAY,CAAC,IAAI,CAAC;QAClB,IAAIR,IAAI,EAAE;UACR,MAAMY,YAAY,GAAG,IAAIf,QAAQ,CAC/B,4CAA4C,EAC5C,CACE;YACEgB,MAAM,EAAE,CACN;cAAEC,YAAY,EAAE,SAAS;cAAEC,IAAI,EAAE,OAAO;cAAEC,IAAI,EAAE;YAAS,CAAE,EAC3D;cAAEF,YAAY,EAAE,SAAS;cAAEC,IAAI,EAAE,OAAO;cAAEC,IAAI,EAAE;YAAS,CAAE,CAC5D;YACDD,IAAI,EAAE,SAAS;YACfE,OAAO,EAAE,CAAC;cAAEH,YAAY,EAAE,QAAQ;cAAEC,IAAI,EAAE,EAAE;cAAEC,IAAI,EAAE;YAAQ,CAAE,CAAC;YAC/DE,eAAe,EAAE,MAAM;YACvBF,IAAI,EAAE;WACP,CACF,EACDZ,OAAO,CACR;UACD;UACA,MAAMe,QAAQ,GAAG,MAAMP,YAAY,CAACQ,OAAO,CAACrB,OAAO,EAAE,CAAC,CAAC;UACvD,IAAI,CAACY,OAAO,EAAE;UACdL,MAAM,CAACa,QAAQ,CAAC;SACjB,MAAM;UACL,MAAMA,QAAQ,GAAG,MAAMf,OAAO,CAACiB,aAAa,CAACtB,OAAO,CAAC;UACrD,IAAI,CAACY,OAAO,EAAE;UACdL,MAAM,CAACa,QAAQ,CAAC;;OAEnB,CAAC,OAAOG,CAAM,EAAE;QACf,IAAI,CAACX,OAAO,EAAE;QACdD,QAAQ,CAACY,CAAC,CAAC;OACZ,SAAS;QACRd,YAAY,CAAC,KAAK,CAAC;;IAEvB,CAAC,GAAG;IAEJ,OAAO,MAAK;MACVG,OAAO,GAAG,KAAK;IACjB,CAAC;EACH,CAAC,EAAE,CAACZ,OAAO,EAAEK,OAAO,CAAC,CAAC;EAEtB,OAAO;IAAEC,GAAG;IAAEE,SAAS;IAAEE;EAAK,CAAE;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}